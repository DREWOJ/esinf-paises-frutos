@startuml CD_COMPLETE

skinparam classAttributeIconSize 0
hide empty members

class Container {
  -data: Map<String, FruitData>

  +addFruitData(fruit, fruitData)
  +getFruitData(fruit)
  +getFruits()
  +iterator()
}

class FruitData {
  -fruitData: Map<String, CountryData>

  +addCountryData(country, countryData)
  +getCountryData(country)
  +getCountries()
  +iterator()
}

class CountryData {
  -productionData: SortedSet<YearProductionData>

  +addProductionData(year, quantity)
  +getProductionData(year)
  +getProductionYears()
  +getOverallProductionQuantity()
  +size()
  +iterator()
}

class YearProductionData {
  -year: int
  -quantity: int

  +getYear()
  +getQuantity()
  +equals(other)
  +compareTo(other)
}

class GreatestDifferenceResult {
  - fruit: String
  - startYear: int
  - endYear: int
  - difference: int

  +getFruit()
  +getStartYear()
  +getEndYear()
  +getDifference()
}

class CSVReader {
  -scanner: Scanner

  + CSVReader(filename)

  - readHeader()
  + read()
}

class GreatestDifference {
  -data: Container
  -country: String

  +execute()
}

class DataHandler {
  +execute(data)
}

class CountrySetWithHigherProduction {
  -container: Container
  - quantityQ: int

  -sortArray()
  -getProductionQtyPerCountry()

  +execute()
}

class CountriesWithProductionGrowth {
  -data: Container
  -fruit: String

  +execute()
}

class CountriesWithGreaterProduction {
  -data: Container
  -fruit: String
  -production: int

  -sortCountryListByProduction(map)
  -convertEntryListToCountryList(list)
  -getProductionOfFirstYearWithGreaterProduction(countryData,production)
  -getCountriesWithGreaterProduction(production)
  -validateFruit(fruit)
  -validateProduction(production)

  +execute()
}

interface Iterable

interface Comparable

Container "1" o-- "0..*" FruitData : contains

FruitData "1" o-- "0..*" CountryData : contains

CountryData "1" o-- "0..*" YearProductionData : contains

YearProductionData ..|> Comparable

CountryData ..|> Iterable

FruitData ..|> Iterable

Container ..|> Iterable

GreatestDifference --> Container : uses
GreatestDifference --> GreatestDifferenceResult : outputs

DataHandler ..> CSVReader : uses

CountriesWithGreaterProduction --> Container : uses

CountriesWithProductionGrowth --> Container : uses

CountrySetWithHigherProduction --> Container : uses

@enduml
